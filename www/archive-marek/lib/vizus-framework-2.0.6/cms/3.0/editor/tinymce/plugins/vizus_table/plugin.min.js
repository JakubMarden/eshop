/**
 * Copyright VIZUS.CZ s.r.o.
 */

tinymce.PluginManager.add('vizus_table', function(editor, url)
{
	var menuItems = [];
	
	function postRenderMenu(menuItem, tableClass)
	{
		function initMenuState()
		{
			var table = editor.dom.getParent(editor.selection.getStart(), 'table');
			menuItem.disabled(!table);
			menuItem.active(table && editor.dom.hasClass(table, tableClass));
			menuItems.push(menuItem);
			
			function changeMenuState(state)
			{
				menuItem.disabled(!state);
				menuItem.active(state && editor.dom.hasClass(editor.dom.getParent(editor.selection.getStart(), 'table'), tableClass));
			}
			
			editor.selection.selectorChanged('table', changeMenuState);
			editor.on('undo', changeMenuState);
			editor.on('redo', changeMenuState);
		}

		if (editor.initialized)
			initMenuState();
		else
			editor.on('init', initMenuState);
	}

	function setTableClass(menuItem, tableClass)
	{
		for (var i = 0; i < menuItems.length; i++)
			menuItems[i].active(false);

		var table = editor.dom.getParent(editor.selection.getStart(), 'table');

		if (table)
		{
			editor.undoManager.transact(function()
			{
				for (var removeClass in tableStyles)
					editor.dom.removeClass(table, removeClass);

				editor.dom.addClass(table, tableClass);
			});

			menuItem.active(true);
		}
	}
	
	var tableStyles = editor.getParam('vizus_table_styles', {});
	var menu = [];

	tinymce.each(tableStyles, function(styleName, tableClass)
	{
		var item =
		{
			text: styleName,
			onclick: function()
			{
				setTableClass(this, tableClass);
			},
			selectable: true,
			onPostRender: function()
			{
				postRenderMenu(this, tableClass);
			}
		};
		
		menu.push(item);
	});

	tinymce.util.I18n.add('cs',
	{
		'Table style': 'Styl tabulky'
	});
	
	editor.addMenuItem('vizus_table',
	{
		text: 'Table style',
		context: 'table',
		menu: menu
	});
});
